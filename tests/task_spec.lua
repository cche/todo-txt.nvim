local task = require("todo-txt.task")
local storage = require("todo-txt.storage")
local parser = require("todo-txt.parser")
local formatter = require("todo-txt.formatter")
local util = require("todo-txt.util")

describe("task", function()
  local config = { todo_file = vim.fn.tempname(), done_file = vim.fn.tempname() }
  task.setup(config)

  before_each(function()
    pcall(vim.loop.fs_unlink, config.todo_file)
    pcall(vim.loop.fs_unlink, config.done_file)
    local f = io.open(config.todo_file, "w")
    if f then
      f:close()
    end
    local f2 = io.open(config.done_file, "w")
    if f2 then
      f2:close()
    end
  end)

  it("should add a new entry", function()
    assert.truthy(task.add_entry("test entry", "A"))
    local entries = storage.get_entries(config.todo_file)
    assert.equal(1, #entries)
    local t = parser.parse(entries[1])
    assert.is_true(t.priority == "A")
    assert.is_true(t.created ~= nil and #t.created == 10)
    assert.is_true(t.is_done == false)
    assert.equals("test entry", t.line)
  end)

  it("should toggle mark complete", function()
    task.add_entry("test entry", "A")
    assert.truthy(task.toggle_mark_complete(1))
    local entries = storage.get_entries(config.todo_file)
    assert.equal(1, #entries)
    local t = parser.parse(entries[1])
    assert.is_true(t.is_done)
    assert.equals("A", t.priority)
    assert.is_truthy(t.created)
    assert.is_truthy(t.completed)
    assert.equals("test entry", t.line)

    assert.truthy(task.toggle_mark_complete(1))
    local entries = storage.get_entries(config.todo_file)
    assert.equal(1, #entries)
    local t2 = parser.parse(entries[1])
    assert.is_false(t2.is_done)
    assert.equals("A", t2.priority)
    assert.is_truthy(t2.created)
    assert.equals("test entry", t2.line)
  end)

  it("should delete an entry", function()
    task.add_entry("test entry", "A")
    assert.truthy(task.delete_entry(1))
    local entries = storage.get_entries(config.todo_file)
    assert.equal(0, #entries)
  end)

  it("should edit an entry", function()
    task.add_entry("test entry", "A")
    task.edit_entry(1, "edited entry")
    local entries = storage.get_entries(config.todo_file)
    assert.equal(1, #entries)
    assert.equal("edited entry", entries[1])
  end)

  it("should set priority of an entry", function()
    task.add_entry("test entry")
    assert.truthy(task.set_priority(1, "B"))
    local entries = storage.get_entries(config.todo_file)
    assert.equal(1, #entries)
    local t = parser.parse(entries[1])
    assert.equals("B", t.priority)

    assert.truthy(task.set_priority(1, nil))
    entries = storage.get_entries(config.todo_file)
    assert.equal(1, #entries)
    local t2 = parser.parse(entries[1])
    assert.is_nil(t2.priority)
  end)

  it("should archive done tasks", function()
    task.add_entry("test entry", "A")
    task.toggle_mark_complete(1)
    local archived = task.archive_done_tasks()
    assert.equal(1, archived)
    local entries = storage.get_entries(config.todo_file)
    assert.equal(0, #entries)
    local done_entries = storage.get_entries(config.done_file)
    assert.equal(1, #done_entries)
    local t = parser.parse(done_entries[1])
    assert.is_true(t.is_done)
    assert.equals("A", t.priority)
    assert.is_truthy(t.created)
    assert.is_truthy(t.completed)
    assert.equals("test entry", t.line)
  end)
end)
